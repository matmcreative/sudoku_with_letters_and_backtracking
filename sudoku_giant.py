board = [
    [1,0,4,0,25,0,19,0,0,10,21,8,0,14,0,6,12,9,0,0,0,0,0,0,5],
    [5,0,19,23,24,0,22,12,0,0,16,6,0,20,0,18,0,25,14,13,10,11,0,1,15],
    [0,0,0,0,0,0,21,5,0,20,11,10,0,1,0,4,8,24,23,15,18,0,16,22,19],
    [0,7,21,8,18,0,0,0,11,0,5,0,0,24,0,0,0,17,22,1,9,6,25,0,0],
    [0,13,15,0,22,14,0,18,0,16,0,0,0,4,0,0,0,19,0,0,0,0,24,20,21,17],
    [12,0,11,0,6,0,0,0,0,15,0,0,0,0,21,25,19,0,4,0,22,14,0,20,0],
    [8,0,0,21,0,16,0,0,0,2,0,3,0,0,0,0,17,23,18,22,0,0,0,24,6],
    [4,0,14,18,7,9,0,22,21,19,0,0,0,2,0,5,0,0,0,6,16,15,0,11,12],
    [22,0,24,0,23,0,0,11,0,7,0,0,4,0,14,0,2,12,0,8,5,19,0,25,9],
    [20,0,0,0,5,0,0,0,0,17,9,0,12,18,0,1,0,0,7,24,0,0,0,13,4],
    [13,0,0,5,0,2,23,14,4,18,22,0,17,0,0,20,0,1,9,21,12,0,0,8,11],
    [14,23,0,24,0,0,0,0,0,0,0,0,20,25,0,3,4,13,0,11,21,9,5,18,22],
    [7,0,0,11,17,20,24,0,0,0,3,4,1,12,0,0,6,14,0,5,25,13,0,0,0],
    [0,0,16,9,0,17,11,7,10,25,0,0,0,13,6,0,0,18,0,0,19,4,0,0,20],
    [6,15,0,19,4,13,0,0,5,0,18,11,0,0,9,8,22,16,25,10,7,0,0,0,0],
    [0,0,0,2,0,0,10,19,3,0,1,0,22,9,4,11,15,0,20,0,0,8,23,0,25],
    [0,24,8,13,1,0,0,4,20,0,17,14,0,0,18,0,16,22,5,0,11,0,10,0,0],
    [23,10,0,0,0,0,0,0,18,0,6,0,16,0,0,17,1,0,13,0,0,3,19,12,0],
    [25,5,0,14,11,0,17,0,8,24,13,0,19,23,15,9,0,0,12,0,20,0,22,0,7],
    [0,0,17,4,0,22,15,0,23,11,12,25,0,0,0,0,18,8,0,7,0,0,14,0,13],
    [19,6,23,22,8,0,0,1,25,4,14,2,0,3,7,13,10,11,16,0,0,0,0,0,0],
    [0,4,0,17,0,3,0,24,0,8,20,23,11,10,25,22,0,0,0,12,13,2,18,6,0],
    [0,0,7,16,0,0,6,17,2,21,0,18,0,0,0,19,0,0,8,0,0,0,0,4,0],
    [18,9,25,1,2,11,0,0,13,22,4,0,21,0,5,0,23,7,0,0,15,0,3,0,8],
    [0,21,10,0,0,12,0,20,16,0,19,0,0,0,0,15,14,4,2,18,23,25,11,7,0]
]
# Create function to solve board
def solve(brd):
    find = find_empty(brd)
    if not find:
        return True
    else:
        row, col = find

    for i in range(1,26):
        if valid(brd, i, (row, col)):
            brd[row][col] = i

            if solve(brd):
                return True

            brd[row][col] = 0

    return False

# Create function to determine if placed numbers are valid
def valid(brd, num, pos):
    # Check row
    for i in range(len(brd[0])):
        if brd[pos[0]][i] == num and pos[1] != i:
            return False

    # Check column
    for i in range(len(brd)):
        if brd[i][pos[1]] == num and pos[0] != i:
            return False

    # Check box
    box_x = pos[1] // 5
    box_y = pos[0] // 5

    for i in range(box_y*5, box_y*5 + 5):
        for j in range(box_x*5, box_x*5 + 5):
            if brd[i][j] == num and (i,j) != pos:
                return False

    return True

# Create function to print grid for puzzle board
def print_board(brd):
    for i in range(len(brd)):
        if i % 5 == 0 and i != 0:
            print("- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -")

        for j in range(len(brd[0])):
            if j % 5 == 0 and j != 0:
                print(" | ", end="")

            if j == 24:
                print(brd[i][j])
            else:
                print(str(brd[i][j]) + " ", end="")

# Create function to determin if puzzle board contains empty values
def find_empty(brd):
    for i in range(len(brd)):
        for j in range(len(brd[0])):
            if brd[i][j] == 0:
                return (i, j)  # row, col

    return None

print_board(board)
solve(board)
print("_____________________________________________________________")
print_board(board)